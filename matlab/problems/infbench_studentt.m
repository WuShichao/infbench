function [y,y_std] = infbench_studentt(x,infprob)
%INFBENCH_STUDENTT Inference benchmark log pdf -- Student's t density.

if isempty(x)
    if isempty(infprob) % Generate this document        
        fprintf('switch D\n');
        for D = 1:20
            Mu = 2*rand(1,D)-1;
            Sigma = exp(randn(1,D));
            fprintf('\tcase %d\n',D);
            fprintf('\t\tMu = %s;\n',mat2str(Mu));
            fprintf('\t\tSigma = %s;\n',mat2str(Sigma));
        end
        fprintf('\totherwise\n\t\terror(''%s:TooHighDim'',''Benchmark function supports up to D=20 dimensions.'');\n',mfilename);
        fprintf('end\n');
        
    else
        D = infprob(1);         % Call with the number of dimensions
        
        switch D
            case 1
                Mu = 3.65104656885313;
                Sigma = 2.86422972771057;
            case 2
                Mu = [2.58778189076362 4.42534865855064];
                Sigma = [3.27308856827218 5.63977713842545];
            case 3
                Mu = [4.58425107298539 4.50380351027327 4.51109783262654];
                Sigma = [0.308199929476371 0.593084099766998 6.67864801017736];
            case 4
                Mu = [3.98684959655652 0.898295926969432 0.181731669542745 1.81815977595531];
                Sigma = [0.430381544551324 0.393640821616058 0.155894145563331 3.62340171196108];
            case 5
                Mu = [3.61827488241602 3.5580621954134 2.20589421983807 0.256559474767122 4.52146455678057];
                Sigma = [0.198367444739044 0.369491297336098 2.53626173363149 0.171381476413245 0.989680016151328];
            case 6
                Mu = [4.8774056385745 1.04667255701533 0.813476395162971 1.83617865590482 1.35106652626452 0.896227212507513];
                Sigma = [0.267499832819909 1.6069547337688 1.27717780367197 0.151878421678655 1.84469607132419 3.05189987605988];
            case 7
                Mu = [3.49520168887686 0.0394625983119329 1.73713931727004 1.41389119951242 4.00473926522285 3.40140765468937 2.86112738752816];
                Sigma = [4.77853609194101 1.03983027837767 0.648100471335398 3.53392035563314 0.608231374186736 0.145623214710187 0.404650454786835];
            case 8
                Mu = [1.67127410646434 1.44648482669595 1.36568018759955 4.76894350501614 1.49593617050753 0.622807376575042 2.96917935444606 1.65552243275926];
                Sigma = [0.303888036687726 0.250001174608359 0.604070019766141 0.413687205296243 1.47676334247824 4.61497870457668 2.9108215268623 0.898021810620001];
            case 9
                Mu = [2.52019812204401 2.04746096908158 3.57998158244949 2.72639504860826 1.86177585065276 2.58130239266173 1.71018277273891 4.6667184601247 1.43590308874376];
                Sigma = [1.03461330035219 2.80526623924197 1.4884008313029 0.877954463157776 6.02425546019706 1.18069973425706 0.375015550192 0.237113500558311 0.230542177541393];
            case 10
                Mu = [3.17899370691334 1.66305763272473 0.553802442344475 3.54262915566014 1.49940197312403 1.29419864203601 0.209244596778414 0.983710774681725 3.73271252033859 0.77912265012923];
                Sigma = [1.20877248289071 0.619648451560377 0.995592780823168 0.887492097206696 0.654863522697984 0.448213138669965 0.58512850483665 2.73369479597292 0.385749168642684 6.35614901065514];
            case 11
                Mu = [3.98471339567261 3.44880011645878 0.749423861429107 1.73905938530326 4.61223690783646 2.54409590586548 4.83201982548696 0.00399892997552498 4.00004725382668 3.47097065179762 1.70122880379518];
                Sigma = [0.730919746593654 3.13210344659037 1.74331747413091 0.641104678747553 0.316919543869393 4.95316571765351 3.07838424165144 4.12568871938459 1.31200755164623 1.27900128273147 0.372917825223713];
            case 12
                Mu = [3.28547212706556 4.82194436748309 2.88014965954872 1.25643310660013 2.58294123448011 0.901037968980205 1.89392126119623 4.44071537026457 1.71132801048177 3.70937309046611 3.01856470249653 3.27927601376538];
                Sigma = [0.733593514020589 15.3309052938276 0.938231161473067 0.731439809264155 0.400922410163426 0.44709831008392 0.477758729541282 0.868756309927931 2.05572767222988 0.466921995885922 0.175577979797756 6.78385191794382];
            case 13
                Mu = [1.99428146749318 3.64588012840359 4.59634581665893 0.523581008486048 0.117356518096299 4.37521898825499 2.06649089134318 4.18483850625016 2.31870805652915 1.59856439519517 4.3684422610236 4.83865485776162 4.74028467831616];
                Sigma = [1.41641987231654 1.50239127509834 1.25171879517294 0.921392976341443 1.37422105255023 5.00764099084084 1.8829003335333 0.40146138987744 0.13522597909932 2.76686979514978 1.04239356199241 1.2931605352429 2.40701860620166];
            case 14
                Mu = [4.50834692013359 0.907183590335511 1.92125036639706 2.71678978198624 3.43103747956185 2.66926442181423 3.38257455486901 0.402717312809529 1.39011809857632 1.0133801536061 2.64913980717552 2.23426001147543 2.53539027754331 0.75293294998919];
                Sigma = [0.365225833014573 0.104193722802118 1.32677101657311 0.982065718092522 1.20885162286626 2.59168785230297 0.591712123587941 0.880348876693257 1.07854295739192 0.989390750029341 1.18521449953892 1.36896199074585 1.54408862074292 0.762841403458409];
            case 15
                Mu = [3.92545015555319 0.592817448985837 4.72435575411658 0.511855370421972 2.13752519567361 2.18671938214843 4.43667429824662 3.16880908082213 1.28177511643304 0.841783189271133 4.52770276850688 3.93655248455893 3.08592420966313 4.54429586984331 3.19706623810686];
                Sigma = [5.00815636480901 4.87534790621981 1.42675414810432 4.08231048547947 1.22877889556255 2.06055523377237 0.57172929031123 1.06686132675133 0.304119076104134 1.72575455031647 4.54462454933556 0.63318799293033 0.803944722391931 4.26078336500023 8.32672335909069];
            case 16
                Mu = [0.954091916712379 2.60093137824033 3.24593874536181 1.64267697702746 4.37537748702423 0.533331193262722 0.94103287773968 0.246738445440949 4.06373349112124 2.66680823916083 0.980674428461865 1.75213624600763 2.29597561262064 2.51264954459509 3.14372468161973 0.141146528220388];
                Sigma = [3.16870759788073 0.290755830661116 3.0102013181694 0.227798136633049 0.749348024912055 13.2221156284201 2.48140627591485 4.26695007656365 1.27203084572525 0.384449829621887 0.654802191591236 0.748822010326611 1.33363586291966 0.684373446138912 6.32473595203039 0.531049548239484];
            case 17
                Mu = [0.579639787836605 2.55587955082146 4.01278900525616 3.78832563742103 0.377158980484454 4.60748806313673 1.62671456131811 3.1763044909805 1.23410533938414 2.28528078407298 4.45427090360548 2.02737418628697 0.94279177186846 2.88571388969124 4.98123843139694 4.81012556516591 1.02164614271798];
                Sigma = [0.437160471431348 0.361777137590671 3.07520918421151 1.38252227940014 2.84830861947471 4.31764608384901 2.32166042451638 0.318295075865627 0.558858685913576 1.84815092936822 1.44477278799042 0.339921962998262 0.0899917255965068 0.17375229654313 0.237997603446767 2.20727562237295 1.40914772879508];
            case 18
                Mu = [4.26694970480616 0.416585347092449 3.50182724989956 4.38961462809249 0.219146083118909 1.2856072827598 4.77461895226302 4.54788680395607 1.97326482172799 1.12433784007739 3.70575332004967 4.7190391867989 0.524024750004918 1.70182625119241 0.325363398822373 2.42557017890352 2.91350829730227 4.92236358423587];
                Sigma = [1.91527826060296 1.48448446076181 2.16259746562807 0.858925307832562 1.79678741575284 0.239056828177252 2.96194037833334 3.87206406243013 1.13347352311392 8.44493859240023 2.21909136145538 3.20307082816743 0.276438135709549 1.15547990587411 0.238565326642218 0.445185360386363 1.61189934249445 1.52306016848864];
            case 19
                Mu = [0.0576612817424177 0.109201890989219 2.31914987833817 2.96716759883813 2.33749493731412 2.80916139795271 1.06801257264198 0.100717668708291 2.02479501533166 2.48757850738725 4.49490601449441 1.64182902671705 2.95703911231986 0.424106557543503 3.95799689992665 0.215011612828305 2.26864400611579 1.79343375717781 2.05187595889128];
                Sigma = [0.162606945856234 3.28135551527791 0.142347062126777 0.833635133990289 0.5825751991717 1.3965118420885 0.958354535478717 7.75620470612931 0.371228140502201 1.40551129590517 1.38415436064741 0.403536084007869 3.53196094968841 1.48462147777685 2.58680092825872 0.110005605500197 0.998189135530267 0.43179450885129 1.1268203861243];
            case 20
                Mu = [2.41191346100418 1.13989723820431 1.76242310768243 0.431779596156288 0.245487530510329 3.57583590572499 1.23604320344258 2.67702874736715 2.48743054010291 1.50910058981258 1.92193404090513 4.80753550485503 2.52617644665525 0.871324301306206 4.52423208152458 0.493599357940522 2.52776506048972 1.50102204813571 4.40504614808318 2.51166356005216];
                Sigma = [1.50673509970872 1.86107905190513 0.232129801387323 1.67461714605304 1.29702351012085 1.25605580301662 0.456184412113352 0.533050753091043 0.560134501403911 1.28810512111819 1.94312019869682 3.40151530744789 5.76338724359595 0.885312547273192 1.12739278466618 0.255304193485077 0.665119385840935 1.46286869302819 0.150736168253727 0.447655492369895];
            otherwise
                error('infbench_studentt:TooHighDim','Benchmark function supports up to D=20 dimensions.');
        end        
        
        y.func = ['@(x,infprob) ' mfilename '(x,infprob)'];
        Df = (1:D)*0.5+2;
        
        Mean = Mu;
        Cov = diag(Df./(Df-2).*Sigma.^2);
        Mode = Mu;
                
        y.D = D;
        y.LB = -Inf(1,D);
        y.UB = Inf(1,D);
        y.PLB = -1 - 2*sqrt(diag(Cov))';
        y.PUB = 1 + 2*sqrt(diag(Cov))';
        y.lnZ = 0;        % Log normalization factor
        y.Mu = Mu;
        y.Sigma = Sigma;
        y.Df = Df;
        y.Mean = Mean;        % Distribution moments
        y.Cov = Cov;
        y.Mode = Mode;        % Mode of the pdf
        
        priorMean = 0.5*(y.PUB + y.PLB);
        priorSigma2 = (0.5*(y.PUB - y.PLB)).^2;
        priorCov = diag(priorSigma2);
        y.Prior.Mean = priorMean;
        y.Prior.Cov = priorCov;
        
        % Compute each coordinate separately
        y.Post.Mean = zeros(1,D);
        PostSigma2 = zeros(1,D);
        y.Post.Mode = zeros(1,D);
        range = 5*(y.PUB-y.PLB);
        Z = zeros(1,D);
        for i = 1:D
            % Compute normalization constant
            fun = @(x_) tpdf((x_-Mu(i))/Sigma(i),Df(i))/Sigma(i) .* normpdf(x_,priorMean(i),sqrt(priorSigma2(i)));
            Z(i) = integral(fun,y.PLB(i)-range(i),y.PUB(i)+range(i));
            
            % Compute mean
            fun = @(x_) x_.*tpdf((x_-Mu(i))/Sigma(i),Df(i))/Sigma(i) .* normpdf(x_,priorMean(i),sqrt(priorSigma2(i)));
            y.Post.Mean(i) = integral(fun,y.PLB(i)-range(i),y.PUB(i)+range(i))/Z(i);
                        
            % Compute variance
            fun = @(x_) x_.^2.*tpdf((x_-Mu(i))/Sigma(i),Df(i))/Sigma(i) .* normpdf(x_,priorMean(i),sqrt(priorSigma2(i)));
            PostSigma2(i) = integral(fun,-Inf,Inf)/Z(i) - y.Post.Mean(i)^2;            
            
            % Compute mode
            options.Display = 'off';
            np = @(x_) -tpdf((x_-Mu(i))/Sigma(i),Df(i))/Sigma(i) .* normpdf(x_,priorMean(i),sqrt(priorSigma2(i)));
            y.Post.Mode(i) = fminunc(np,y.Post.Mean(i),options);            
        end
        y.Z = Z;    % Save normalization constant                
        y.Post.lnZ = sum(log(Z));
        y.Post.Cov = diag(PostSigma2);
        [y.Post.MarginalBounds,y.Post.MarginalPdf] = ComputeMarginals(y);
    end
elseif nargout > 0
    %xprime = bsxfun(@power,abs(x),infprob.Power).*sign(x);
    %logJ = bsxfun(@plus,log(infprob.Power),bsxfun(@times,infprob.Power-1,log(abs(x))));
    %y = mvnlogpdf(xprime,infprob.Mu,infprob.Sigma) + abs(sum(logJ,2));
    
    mu = infprob.Mu;
    sigma = infprob.Sigma;
    df = infprob.Df;
    
    y = zeros(size(x,1),1);
    for i = 1:infprob.D
        y = y + tlogpdf(x(:,i),mu(i),sigma(i),df(i));
    end
    y_std = zeros(size(x,1),1);    
    
else
    Nrnd = 1e5;
    D = infprob.D;
    xrnd = zeros(Nrnd,D);
    for i = 1:D
        xrnd(:,i) = trnd(infprob.Df(i),[Nrnd,1])*infprob.Sigma(i) + infprob.Mu(i);
    end
    cornerplot(xrnd);
end

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [MarginalBounds,MarginalPdf] = ComputeMarginals(infprob)

D = infprob.D;
Mu = infprob.Mu;
Sigma = infprob.Sigma;
Df = infprob.Df;
Z = infprob.Z;

priorMean = infprob.Prior.Mean;
priorSigma = sqrt(diag(infprob.Prior.Cov)');

postMean = infprob.Post.Mean;
postSigma = sqrt(diag(infprob.Post.Cov)');

% Compute bounds for marginal total variation
Tol = 1e-6;

Nx = 1e4;
MarginalBounds = zeros(2,D);
MarginalPdf = zeros(D,Nx);

for i = 1:D    
    % Find approximate lower/upper bound
    x_lb = norminv(Tol,postMean(i),2*postSigma(i));
    x_ub = norminv(1-Tol,postMean(i),2*postSigma(i));    
    MarginalBounds(:,i) = [x_lb;x_ub];
    
    % Evaluate marginal pdf
    fun = @(x_) tpdf((x_-Mu(i))/Sigma(i),Df(i))/Sigma(i) .* normpdf(x_,priorMean(i),priorSigma(i))/Z(i);
    x_range = linspace(x_lb,x_ub,Nx);
    MarginalPdf(i,:) = fun(x_range);
end


end
